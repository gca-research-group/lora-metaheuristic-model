  %Importación de Paquetes
pkg load optim;
pkg load geometry;
pkg load control;
pkg load io;
pkg load image;

function data = cargar_csv()
  [archivo, ruta] = uigetfile('*.csv', 'Selecciona el mapa');
  if isequal(archivo, 0)
    disp('No se seleccionó ningún mapa.'); 1
    data = [];
  else
    filepath = fullfile(ruta, archivo);
    data = csvread(filepath, 1, 0);
  end
end
%

function posiciones = generar_posiciones_aleatorias(num_antenas, polygon)
    posiciones = [];
    while rows(posiciones) < num_antenas
        x_min = min(polygon(:, 1));
        x_max = max(polygon(:, 1));
        y_min = min(polygon(:, 2));
        y_max = max(polygon(:, 2));
        x_rand = x_min + rand * (x_max - x_min);
        y_rand = y_min + rand * (y_max - y_min);
        if inpolygon(x_rand, y_rand, polygon(:, 1), polygon(:, 2))
            posiciones = [posiciones; x_rand, y_rand];
        end
    end
end

#funcion de prueba, intentar sacar la nube de circulos
function obstaculos_1 = generar_obstaculos(numero_deantenas, poligonos)
    obstaculos_1 = [100];
    while restricciones(obstaculos_1) < numero_deantenas
        x_minimo = minimo (poligono(:, 1));
        x_maximo = maximo (poligono(:, 1));
        y_minimo = minimo (poligono(:, 1));
        x_maximo = maximo (poligono(:, 1));
        x_rand = x_minimo + rand * (x_maximo - x_minimo);
        y_rand = y_minimo + rand * (x_minimio - y_minimo);
        if obstaculos_1 (x_rand, y_rand, poligono(:, 1), poligono(:, 2))
            posiciones = [posiciones; x_minimi, y_maximo, x_rand, y_rand];
        endif
    endwhile
    end
#ccc%%%
%%

function [costo, area_cubierta_porcentaje, area_interseccion_porcentaje, area_total_cubierta_porcentaje] = calcular_costo(posiciones, radio_antena, polygon, area_objetivo)
    x_min = min(polygon(:, 1));
    x_max = max(polygon(:, 1));
    y_min = min(polygon(:, 2));
    y_max = max(polygon(:, 2));
    [X, Y] = meshgrid(linspace(x_min, x_max, 100), linspace(y_min, y_max, 100));
    puntos_grilla = [X(:), Y(:)];
    in = inpolygon(puntos_grilla(:, 1), puntos_grilla(:, 2), polygon(:, 1), polygon(:, 2));
    puntos_grilla = puntos_grilla(in, :);

    % Calcula el área de cada celda en la grilla
    area_celda = (x_max - x_min) / 100 * (y_max - y_min) / 100;

    cobertura = zeros(size(puntos_grilla, 1), 1);

    for i = 1:size(posiciones, 1)
        d = sqrt((puntos_grilla(:, 1) - posiciones(i, 1)).^2 + (puntos_grilla(:, 2) - posiciones(i, 2)).^2);
        cobertura = cobertura + (d <= radio_antena);
    end

    area_cubierta = area_celda * sum(cobertura > 0);
    area_interseccion = area_celda * sum(cobertura > 1);
    area_total_cubierta = area_celda * sum(cobertura >= 1);

    area_cubierta_porcentaje = (area_cubierta / area_objetivo) * 100;
    area_interseccion_porcentaje = (area_interseccion / area_objetivo) * 100;
    area_total_cubierta_porcentaje = (area_total_cubierta / area_objetivo) * 100;

    costo = area_objetivo - area_cubierta;

    if area_cubierta < area_objetivo
        penalizacion = (area_objetivo - area_cubierta) * 10;
        costo = costo + penalizacion;
    end
end


%
function nuevas_posiciones = perturbar(posiciones, polygon)
    idx = randi(size(posiciones, 1));
    nuevas_posiciones = posiciones;
    nuevas_posiciones(idx, :) = generar_posiciones_aleatorias(1, polygon);
end

%la magia de generar el archivo kml para leerse en el Earth
function generar_kml(nombre_archivo, coordenadas)
    fid = fopen(nombre_archivo, 'w');
    fprintf(fid, '<?xml version="1.0" encoding="UTF-8"?>\n');
    fprintf(fid, '<kml xmlns="http://www.opengis.net/kml/2.2">\n');
    fprintf(fid, '  <Document>\n');
    fprintf(fid, '    <name>Posiciones de Antenas</name>\n');
    for i = 1:size(coordenadas, 1)
        fprintf(fid, '    <Placemark>\n');
        fprintf(fid, '      <name>Antena: %d</name>\n', i);
        fprintf(fid, '      <Point>\n');
        fprintf(fid, '        <coordinates>%.6f,%.6f,0</coordinates>\n', coordenadas(i, 1), coordenadas(i, 2));
        fprintf(fid, '      </Point>\n');
        fprintf(fid, '    </Placemark>\n');
    end
    fprintf(fid, '  </Document>\n');
    fprintf(fid, '</kml>\n');
    fclose(fid);
end


function ejecutar_algoritmo(num_antenas, radio_antena, txt_temp, data)
    % Parámetros del algoritmo
    temp_inicial = 200;
    temp_final = 1;
    alfa = 0.999;
    max_iter = 1750;

    % Lectura de las coordenadas
    lat = data(:, 1);
    lon = data(:, 2);

    % Calcular el área usando latitud y longitud
    R = 6378137; % Radio de la Tierra en metros
    x = lon * (pi / 180) *  R * cosd(mean(lat));
    y = lat * (pi / 180) * R;

    % Calcular el área del polígono
    area = 0;
    n = length(x);
    for i = 1:n
        j = mod(i, n) + 1;
        area = area + x(i) * y(j) - y(i) * x(j);
    end
    area = abs(area) / 2;
    area_km2 = area / 1e6;
    %fprintf('--- Resultados ---\n');
    %printf('Zona de Cobertura: %.2f km^2\n', area_km2);
    polygon = [x, y];
    area_objetivo = polygonArea(polygon);
    posiciones = generar_posiciones_aleatorias(num_antenas, polygon);

    % Simulated Annealing
    T = temp_inicial;
    [mejor_costo, area_cubierta_porcentaje, area_interseccion_porcentaje, area_total_cubierta_porcentaje] = calcular_costo(posiciones, radio_antena, polygon, area_objetivo);
    mejor_solucion = posiciones;

    % Plotar la grafica para visualizar las iteraciones
    figure;
    subplot(3, 1, 1);
    hold on;
    title('COSTO');
    xlabel('Iteración');
    ylabel('Costo');
    cost_plot = plot(0, mejor_costo, 'r');

    subplot(3, 1, 2);
    hold on;
    title('COBERTURA (%)');
    xlabel('Iteración');
    ylabel('Cobertura (%)');
    coverage_plot = plot(0, area_cubierta_porcentaje, 'b');

    subplot(3, 1, 3);
    hold on;
    title('TEMPERATURA');
    xlabel('Iteración');
    ylabel('Temperatura');
    temperature_plot = plot(0, T, 'k');

    iter = 0;

    while T > temp_final && iter < max_iter
        iter = iter + 1;
        nueva_solucion = perturbar(posiciones, polygon);
        [nuevo_costo, nueva_area_cubierta_porcentaje, nueva_area_interseccion_porcentaje, nueva_area_total_cubierta_porcentaje] = calcular_costo(nueva_solucion, radio_antena, polygon, area_objetivo);
        delta_E = nuevo_costo - mejor_costo;

        if delta_E < 0 || rand() < exp(-delta_E / T)
            posiciones = nueva_solucion;
            mejor_costo = nuevo_costo;
            mejor_solucion = nueva_solucion;
            area_cubierta_porcentaje = nueva_area_cubierta_porcentaje;
            area_interseccion_porcentaje = nueva_area_interseccion_porcentaje;
            area_total_cubierta_porcentaje = nueva_area_total_cubierta_porcentaje;
        end

        % Actualizar gráficos
        set(cost_plot, 'XData', [get(cost_plot, 'XData'), iter], 'YData', [get(cost_plot, 'YData'), mejor_costo]);
        set(coverage_plot, 'XData', [get(coverage_plot, 'XData'), iter], 'YData', [get(coverage_plot, 'YData'), area_cubierta_porcentaje]);
        set(temperature_plot, 'XData', [get(temperature_plot, 'XData'), iter], 'YData', [get(temperature_plot, 'YData'), T]);

        T = alfa * T;

        set(txt_temp, 'String', sprintf('T = %.2f', T));
        drawnow;
    end

    % Crear el archivo KML
    lat_lon_mejor_solucion = [mejor_solucion(:, 2) / R * (180 / pi), mejor_solucion(:, 1) / (R * cosd(mean(lat))) * (180 / pi)];
    generar_kml('Posiciones.kml', lat_lon_mejor_solucion);

    % resultados en la ventana de comandos
    fprintf('--- Resultados ---\n');
    %fprintf('Área cubierta: %.2f%% del polígono\n', area_cubierta_porcentaje);
    printf('Area a cubir: %.2f km^2\n', area_km2);
    fprintf('Área de intersección: %.2f%% \n', area_interseccion_porcentaje);
    fprintf('Área total cubierta: %.2f%% \n', area_total_cubierta_porcentaje);
    fprintf('*****************\n');

    % Mostrar resultados en la gráfica de manera destacada
    figure;
    plot(polygon(:, 1), polygon(:, 2), 'k-', 'LineWidth', 2);
    hold on;
    viscircles(mejor_solucion, radio_antena * ones(size(mejor_solucion, 1), 1), 'EdgeColor', 'b');
    plot(mejor_solucion(:, 1), mejor_solucion(:, 2), 'ro', 'MarkerFaceColor', 'r');

    % Colocamos un cuadro de texto en la gráfica
    %dim = [.15 .5 .3 .3];
    %str = sprintf('Área cubierta: %.2f%%\nÁrea de intersección: %.2f%%\nÁrea total cubierta: %.2f%%', area_cubierta_porcentaje, area_interseccion_porcentaje, area_total_cubierta_porcentaje);
    %annotation('textbox', dim, 'String', str, 'FitBoxToText', 'on', 'BackgroundColor', 'yellow', 'FontSize', 12, 'FontWeight', 'bold');

    hold off;
    axis equal;
    title('Mejor solución de cobertura de antenas');
    xlabel('X');
    ylabel('Y');
end

% Crear la figura principal
f = figure('Position', [300, 300, 300, 300], 'MenuBar', 'none', 'Name', 'DINA-SOFT 2024', 'NumberTitle', 'off', 'Resize', 'off', 'Color', [0.8 0.8 0.8]);

% Crear el botón para cargar el archivo CSV
uicontrol(f, 'Style', 'pushbutton', 'Position', [85, 260, 120, 35], 'String', 'Cargar Mapa', 'FontSize', 10, 'FontWeight', 'bold', 'BackgroundColor', [1 1 1], 'Callback', @(src, event) assignin('base', 'data', cargar_csv()));


% Crear el texto y cuadro de edición para "Antenas"
uicontrol(f, 'Style', 'text', 'Position', [20, 180, 100, 35], 'String', 'Antenas:', 'FontSize', 12, 'FontWeight', 'bold', 'BackgroundColor', [0.8 0.8 0.8]);
edit_antenas = uicontrol(f, 'Style', 'edit', 'Position', [150, 180, 100, 35], 'String', '10', 'FontSize', 12);

% Crear el texto y cuadro de edición para "Radio"
uicontrol(f, 'Style', 'text', 'Position', [20, 140, 100, 35], 'String', 'Radio (m):', 'FontSize', 12, 'FontWeight', 'bold', 'BackgroundColor', [0.8 0.8 0.8]);
edit_radio = uicontrol(f, 'Style', 'edit', 'Position', [150, 140, 100, 35], 'String', '100', 'FontSize', 12);

% Cuadro de texto para mostrar la temperatura
txt_temp = uicontrol(f, 'Style', 'text', 'Position', [20, 100, 230, 35], 'String', 'T = 0', 'FontSize', 12, 'FontWeight', 'bold', 'BackgroundColor', [1 1 1]);

% Botón de optimización
uicontrol(f, 'Style', 'pushbutton', 'Position', [85, 20, 120, 60], 'String', 'OPTIMIZAR', 'FontSize', 10, 'FontWeight', 'bold', 'BackgroundColor', [1 1 1], 'Callback', @(src, event) ejecutar_algoritmo(str2num(get(edit_antenas, 'String')), str2num(get(edit_radio, 'String')), txt_temp, evalin('base', 'data')));




